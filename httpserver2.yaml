apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJraW5na29uZ2xpdHRsZSIsInBhc3N3b3JkIjoiTGVhcm5Eb2NrZXJAMjAyMjA0MTAiLCJhdXRoIjoiYTJsdVoydHZibWRzYVhSMGJHVTZUR1ZoY201RWIyTnJaWEpBTWpBeU1qQTBNVEE9In19fQ==
kind: Secret
metadata:
  name: mysecret
type: kubernetes.io/dockerconfigjson

---
apiVersion: v1
kind: ConfigMap 
metadata:
  name: myenv
data:
   httpport: "8080"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: httpserver2
  name: httpserver2
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: httpserver2
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: httpserver2
    spec:
      imagePullSecrets:
          - name: mysecret
      containers:
        - env:
            - name: httpport
              valueFrom:
                configMapKeyRef:
                  name: myenv
                  key: httpport
          image: docker.io/kingkonglittle/httpserver2:v1.0
          imagePullPolicy: IfNotPresent 
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: httpserver2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 100Mi
            requests:
              cpu: 20m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
